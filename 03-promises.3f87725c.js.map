{"mappings":"gfAsDA,IAAAA,EAAAC,EAAA,SAwBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,aAAY,WACNH,EACFF,EAAQ,CAAEM,SAAAT,EAAUU,MAAAT,IAEpBG,EAAO,CAAEK,SAAAT,EAAUU,MAAAT,MAEpBA,MAEFU,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MACjBb,EAAAgB,OAAOC,QAAQ,uBAAwCC,OAAfN,EAAS,QAAYM,OAANL,EAAM,MAAK,CAC9DM,QAAO,SAGZC,OAAM,SAAAL,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAClBb,EAAAgB,OAAOK,QAAQ,sBAAqCH,OAAfN,EAAS,QAAYM,OAANL,EAAM,MAAK,CAC7DM,QAAS,SAxCJG,SAASC,cAAc,QAE/BC,iBAAiB,UAEtB,SAAgCC,GAC9BA,EAAMC,iBAEN,IAAgCC,EAAAF,EAAMG,OAA9Bf,EAAwBc,EAAxBd,MAAOgB,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OACfC,EAAYC,SAASnB,EAAMoB,OAC3BC,EAAWF,SAASH,EAAKI,QAMjC,SAAuBE,EAAOtB,EAAOgB,GACnC,IAAK,IAAIO,EAAI,EAAGA,GAAKD,EAAOC,GAAK,EAAG,CAElClC,EAAckC,EADHvB,EAAQgB,GAAQO,EAAI,KALjCC,CAFqBL,SAASF,EAAOG,OAETF,EAAWG,M","sources":["src/js/03-promises.js"],"sourcesContent":["// // all modules\n// import Notiflix from 'notiflix';\n\n// const refs = {\n//   formEls: document.querySelector('.form'),\n//   firstDelay: document.querySelector('input[name=delay]'),\n//   delayStep: document.querySelector('input[name=step]'),\n//   amount: document.querySelector('input[name=amount]'),\n// };\n\n// refs.formEls.addEventListener('submit', onCatFunction);\n\n// function onCycleFunction(amount, delay, step) {\n//   for (let i = 1; i <= amount; i += 1) {\n//     let total = delay + step * (i - 1);\n//     createPromise(i, total)\n//       .then(({ position, delay }) => {\n//         return Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         return Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//   }\n// }\n\n// function onCatFunction(event) {\n//   event.preventDefault();\n//   const amount = Number(event.target.amount.value);\n//   const delay = Number(event.target.delay.value);\n//   const step = Number(event.target.step.value);\n\n//   onCycleFunction(amount, delay, step);\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n//\n//ВТОРОЙ ВАРИАНТ\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', createPromisesOnSubmit);\n\nfunction createPromisesOnSubmit(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.target;\n  const delayTime = parseInt(delay.value);\n  const stepTime = parseInt(step.value);\n  const amountNumber = parseInt(amount.value);\n\n  countPromises(amountNumber, delayTime, stepTime);\n}\n\nfunction countPromises(count, delay, step) {\n  for (let i = 1; i <= count; i += 1) {\n    let time = delay + step * (i - 1);\n    createPromise(i, time);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n        timeout: 2000,\n      });\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n        timeout: 2000,\n      });\n    });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position1","delay1","Promise","resolve","reject","shouldResolve","Math","random","setInterval","position","delay","then","param","Notify","success","concat","timeout","catch","failure","document","querySelector","addEventListener","event","preventDefault","_target","target","step","amount","delayTime","parseInt","value","stepTime","count","i","$ce04d3a99e08e73b$var$countPromises"],"version":3,"file":"03-promises.3f87725c.js.map"}